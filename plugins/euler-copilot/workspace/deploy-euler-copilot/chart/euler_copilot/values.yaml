# 全局设置
globals:
  # 节点架构：默认是x86
  # 节点设置：["x86", "arm"]
  arch:
  # 镜像拉取策略， 默认为IfNotPresent
  imagePullPolicy:
  # 存储类；默认为local-path
  storageClass:

# 模型设置
models:
  # 用于问答的大模型；需要为OpenAI兼容接口
  answer:
    # [必填] 接口URL（无需带上“v1”后缀）
    url: 
    # [必填] 接口API Key；默认置空
    key: 
    # [必填] 模型名称
    name: 
    # [必填] 模型最大上下文数；建议>=8192
    ctx_length: 8192
    # 模型最大输出长度，建议>=2048
    max_tokens: 2048
  # 用于Function Call的模型；建议使用特定推理框架
  functioncall:
    # 推理框架类型，默认为ollama
    # 可用的框架类型：["vllm", "sglang", "ollama", "openai"]
    backend: 
    # 模型地址；不填则与问答模型一致
    url: 
    # API Key；不填则与问答模型一致
    key: 
    # 模型名称；不填则与问答模型一致
    name: 
    # 模型最大上下文数；不填则与问答模型一致
    ctx_length:
    # 模型最大输出长度；不填则与问答模型一致
    max_tokens: 
  # 用于数据向量化（Embedding）的模型
  embedding:
    # [必填] Embedding URL（无需带上“v1”后缀）
    url: 
    # [必填] Embedding 模型API Key
    key: 
    # [必填] Embedding 模型名称
    name: 

# 登录设置
login:
  # 登录类型；默认为authhub
  # 可用的类型：["authhub", "oidc", "linux", "bypass"]
  type: 
  # 固定UID设置，仅在type为bypass时有效
  uid: 
  # 客户端ID设置，仅在type为authhub和oidc时有效
  client:
    # [必填] 客户端ID
    id:
    # [必填] 客户端密钥
    secret:
  # OIDC设置，仅在type为oidc时有效
  oidc:
    # OIDC AccessToken获取地址
    token_url: 
    # OIDC UserToken获取地址
    user_url: 
    # OIDC RefreshToken地址
    refresh_url: 
    # OIDC登录跳转地址
    redirect: 

# 域名设置
domain:
  # 用于EulerCopilot的域名；默认为www.eulercopilot.local
  euler_copilot:
  # 部署authhub时使用的域名；默认为suthhub.eulercopilot.local
  authhub: 

# 存储设置
storage:
  # 语义接口
  framework_semantics:
    # 语义接口地址
    path:
    # 语义接口存储大小，默认为5GB
    size:

euler_copilot:
  # 配置文件工具
  secret_inject:
    # 镜像设置；默认为hub.oepkgs.net/neocopilot/secret_inject:dev-x86
    # 镜像标签：["dev-x86", "dev-arm"]
    image: 

  framework:
    # [必填] 是否部署Framework后端框架服务
    enabled: true
    # 镜像设置；默认为hub.oepkgs.net/neocopilot/euler-copilot-framework:0.9.4-x86
    # 镜像标签：["0.9.4-x86", "0.9.4-arm"]
    image:
    # 容器根目录只读
    readOnly:
    # 性能限制设置
    resourceLimits: {}
    # Service设置
    service:
      # Service类型，例如NodePorts
      type:
      # 当类型为nodePort时，填写主机的端口号
      nodePort:

  web:
    # [必填] 是否部署Web前端用户界面
    enabled: true
    # 镜像设置；默认为hub.oepkgs.net/neocopilot/euler-copilot-web:0.9.4-x86
    # 镜像标签：["0.9.4-x86", "0.9.4-arm"]
    image:
    # 容器根目录只读
    readOnly:
    # 性能限制设置
    resourceLimits: {}
    # Service设置
    service:
      # Service类型，例如NodePort
      type:
      # 当类型为NodePort时，填写主机的端口号
      nodePort:
    # Ingress设置
    ingress:
      # URI前缀，默认为/
      prefix:
  
  rag_web:
    # [必填] 是否部署RAG Web前端用户界面
    enabled: true
    # 镜像设置；默认为hub.oepkgs.net/neocopilot/data_chain_web:0.9.4-x86
    # 镜像标签：["0.9.4-x86", "0.9.4-arm"]
    image:
    # 容器根目录只读
    readOnly:
    # 性能限制设置
    resourceLimits: {}
    # Service设置
    service:
      # Service类型，例如NodePort
      type:
      # 当类型为NodePort时，填写主机的端口号
      nodePort:
    # Ingress设置
    ingress:
      # URI前缀；默认为/
      prefix:

  rag:
    # [必填] 是否部署RAG后端服务
    enabled: true
    # 镜像设置；默认为hub.oepkgs.net/neocopilot/data_chain_back_end:0.9.4-x86
    # 镜像标签：["0.9.4-x86", "0.9.4-arm"]
    image:
    # 容器根目录只读
    readOnly:
    # 性能限制设置
    resourceLimits: {}
    # Service设置
    service:
      # Service类型，例如NodePort
      type:
      # 当类型为NodePort时，填写主机的端口号
      nodePort:
