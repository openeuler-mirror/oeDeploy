- name: Install Helm
  hosts: all
  become: yes

  tasks:
    - name: Create namespace
      command: kubectl create namespace {{ namespace }}
      ignore_errors: yes

    - name: Remove Helm repo if exists
      command: helm repo remove {{ helm_repo_name }}
      when: force_install == "true"
      ignore_errors: yes

    - name: Add Helm repo
      command: helm repo add {{ helm_repo_name }} {{ helm_repo_url }}
      args:
        creates: "{{ ansible_user_dir }} /.helm/repository/{{ helm_repo_name }}.yaml"

    - name: Update Helm repo
      command: helm repo update

    - name: Uninstall kuberay-operator if exists
      command: helm uninstall kuberay-operator -n {{ namespace }}
      when: force_install == "true"
      ignore_errors: yes

    - name: Install kuberay-operator
      command: |
        helm install kuberay-operator {{ helm_repo_name }}/kuberay-operator
        -n {{ namespace }} --version {{ kuberay_version }}
      retries: 5

    - name: Uninstall ray-cluster if exists
      command: helm uninstall ray-cluster -n {{ namespace }}
      when: force_install == "true"
      ignore_errors: yes

    - name: Install ray-cluster
      command: |
        helm install ray-cluster {{ helm_repo_name }}/ray-cluster
        -n {{ namespace }} --version {{ kuberay_version }}
        --set image.repository={{ ray_cluster_values.repository }}
        --set image.tag={{ ray_cluster_values.ray_version }}
        --set head.resources.limits.cpu={{ ray_cluster_values.head.cpu }}
        --set head.resources.requests.cpu={{ ray_cluster_values.head.cpu }}
        --set head.resources.limits.memory={{ ray_cluster_values.head.memory }}
        --set head.resources.requests.memory={{ ray_cluster_values.head.memory }}
        --set worker.replicas={{ ray_cluster_values.worker.num }}
        --set worker.minReplicas={{ ray_cluster_values.worker.num }}
        --set worker.maxReplicas={{ ray_cluster_values.worker.num }}
        --set worker.resources.limits.cpu={{ ray_cluster_values.worker.cpu }}
        --set worker.resources.requests.cpu={{ ray_cluster_values.worker.cpu }}
        --set worker.resources.limits.memory={{ ray_cluster_values.worker.memory }}
        --set worker.resources.requests.memory={{ ray_cluster_values.worker.memory }}
      retries: 5

    - name: Wait until service running
      command: |
        kubectl get svc ray-cluster-kuberay-head-svc
        -o custom-columns=POD:metadata.name --no-headers -n {{ namespace }}
      register: service_result
      retries: "{{ retry }}"
      delay: 10
      until: service_result.stdout != ""

    - name: Dashboard port-forward
      command: |
        nohup kubectl port-forward svc/ray-cluster-kuberay-head-svc
        -n {{ namespace }} {{ dashboard_port }}:8265 --address {{ dashboard_address }} > /dev/null 2>&1 &

    - name: Get head pod
      command: |
        kubectl get pods --selector=ray.io/node-type=head
        -o custom-columns=POD:metadata.name --no-headers -n {{ namespace }}
      register: head_pod

    - name: Fail if no head
      fail:
        msg: "Error: KubeRay installation failed"
      when: head_pod.stdout == ""

    - name: Show result
      debug:
        msg: "Head pod: {{ head_pod.stdout }}  Dashboard url: {{ ansible_host }}:{{ dashboard_port }}"