- name: Install KubeRay
  hosts: all
  become: yes

  tasks:
    - name: Create namespace
      command: kubectl create namespace {{ namespace }}
      ignore_errors: yes

    - name: Add Helm repo
      command: helm repo add {{ helm_repo_name }} {{ helm_repo_url }}
      args:
        creates: "{{ ansible_user_dir }}/.helm/repository/{{ helm_repo_name }}.yaml"

    - name: Install kuberay-operator
      command: |
        helm install kuberay-operator {{ helm_repo_name }}/kuberay-operator
        -n {{ namespace }} --version {{ kuberay_version }}
      retries: 5

    - block:
        - name: Set temp directory name
          set_fact:
            temp_dir: "{{ temp_path }}/kuberay_temp_{{ ansible_date_time.iso8601 }}"
        - name: Create temporary directory
          file:
            path: "{{ temp_dir }}"
            state: directory
            mode: '0644'
        - name: Copy values to master
          copy:
            src: "{{ values }}"
            dest: "{{ temp_dir }}"
        - name: Install ray-cluster
          command: |
            helm install ray-cluster {{ helm_repo_name }}/ray-cluster
            -n {{ namespace }} --version {{ kuberay_version }} -f {{ temp_dir }}/{{ values | basename }}
        - name: Delete temporary directory
          file:
            path: "{{ temp_dir }}"
            state: absent
          ignore_errors: yes
      when: values != ""

    - block:
        - name: Install ray-cluster
          command: |
            helm install ray-cluster {{ helm_repo_name }}/ray-cluster
            -n {{ namespace }} --version {{ kuberay_version }}
            --set image.repository={{ ray_cluster_values.repository }}
            --set image.tag={{ ray_cluster_values.ray_version }}
            --set head.resources.limits.cpu={{ ray_cluster_values.head.cpu }}
            --set head.resources.requests.cpu={{ ray_cluster_values.head.cpu }}
            --set head.resources.limits.memory={{ ray_cluster_values.head.memory }}
            --set head.resources.requests.memory={{ ray_cluster_values.head.memory }}
            --set worker.replicas={{ ray_cluster_values.worker.num }}
            --set worker.minReplicas={{ ray_cluster_values.worker.num }}
            --set worker.maxReplicas={{ ray_cluster_values.worker.num }}
            --set worker.resources.limits.cpu={{ ray_cluster_values.worker.cpu }}
            --set worker.resources.requests.cpu={{ ray_cluster_values.worker.cpu }}
            --set worker.resources.limits.memory={{ ray_cluster_values.worker.memory }}
            --set worker.resources.requests.memory={{ ray_cluster_values.worker.memory }}
            --set service.type=NodePort
          retries: 5
      when: values == ""

    - name: Get head pod
      command: |
        kubectl get pods --selector=ray.io/node-type=head
        -o custom-columns=POD:metadata.name --no-headers -n {{ namespace }}
      register: head_pod
      until: head_pod.stdout != ""
      retries: 10
      delay: 5

    - name: Fail if no head
      fail:
        msg: "Error: KubeRay installation failed"
      when: head_pod.stdout == ""

    - name: Show result
      debug:
        msg: "Head pod: {{ head_pod.stdout }}"
