---
- name: Install Ollama and run Deepseek
  hosts: all
  vars:
    ollama_file: "{{ ollama_download | basename }}"
    modelfile_file: "{{ modelfile_download | basename }}"

  tasks:
    # ================ start ollama =====================

    - name: Ensure SELinux Python bindings are installed
      yum:
        name: python3-libselinux
        state: present

    - name: Ensure tar is installed
      yum:
        name: tar
        state: present
    
    - name: Check if Ollama is installed
      command: ollama --version
      register: ollama_version
      ignore_errors: yes

    - name: Download Ollama if not installed
      when: ollama_version.rc != 0
      block:
        - name: Ensure ollama download path exists
          file:
            path: "{{ ollama_download_path }}"
            state: directory
            mode: '0755'
        
        - name: Check architecture
          set_fact:
            arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else 'arm64' }}"

        - name: Validate ollama_file contains correct architecture
          assert:
            that:
              - ollama_file is defined
              - arch in ollama_file
            success_msg: "Architecture validation passed (contains {{ arch }})"
            fail_msg: "Critical error: ollama_file must contain {{ arch }} architecture identifier, current filename is {{ ollama_file }}"
        
        - name: Copy download.sh to remote
          copy:
            src: download.sh
            dest: "{{ ollama_download_path }}/download.sh"
            owner: root
            group: root
            mode: '0644'
        
        - name: Execute download.sh
          shell: >
            bash {{ ollama_download_path }}/download.sh
            {{ ollama_download }}
            {{ ollama_download_path }}
            {{ 1 if download_checksum else 0 }}
            {{ download_timeout }}
            {{ download_retry }}
            >> {{ ollama_download_path }}/download.log
          ignore_errors: no
          async: 0
          register: download_result
          failed_when: download_result.rc != 0

        - name: Extract Ollama package
          unarchive:
            src: "{{ ollama_download_path }}/{{ ollama_file }}"
            dest: /usr
            remote_src: yes

    - name: Verify Ollama installation before creating system user and group
      command: ollama --version
      register: ollama_version_check
      failed_when: ollama_version_check.rc != 0
      changed_when: false
      ignore_errors: no

    - name: Create ollama system user and group
      block:
        - name: Ensure ollama group exists
          group:
            name: ollama
            state: present

        - name: Ensure ollama user exists
          user:
            name: ollama
            group: ollama
            shell: /bin/false
            system: yes
            create_home: yes
            home: /usr/share/ollama

        - name: Add ollama user to ollama group
          user:
            name: ollama
            groups: ollama
            append: yes
    
    - name: Copy Ollama service file to systemd
      copy:
        src: ollama.service
        dest: /etc/systemd/system/ollama.service
        owner: root
        group: root
        mode: '0644'

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable Ollama service to start on boot
      systemd:
        name: ollama
        enabled: true

    - name: Start Ollama service
      systemd:
        name: ollama
        state: started

    # ================ modify modelfile =====================

    - name: Download modelfile
      block:
        - name: Ensure modelfile download path exists
          file:
            path: "{{ modelfile_download_path }}"
            state: directory
            mode: '0755'

        - name: Copy download.sh to remote
          copy:
            src: download.sh
            dest: "{{ modelfile_download_path }}/download.sh"
            owner: root
            group: root
            mode: '0644'
        
        - name: Execute download.sh
          shell: >
            bash {{ modelfile_download_path }}/download.sh
            {{ modelfile_download }}
            {{ modelfile_download_path }}
            {{ 1 if download_checksum else 0 }}
            {{ download_timeout }}
            {{ download_retry }}
            >> {{ modelfile_download_path }}/download.log
          ignore_errors: no
          async: 0
          register: download_result
          failed_when: download_result.rc != 0

      rescue:
        - name: Print error message of downloading modelfile
          debug:
            msg: "Unable to download modelfile, parameter tuning will not take effect."

        - name: Print manual execution message
          debug:
            msg: "Please manually execute: ollama run deepseek-r1:{{ deepseek_version }}"

        - name: Mark playbook as successful
          meta: end_play

    - name: Copy Modelfile to destination
      copy:
        src: Modelfile
        dest: "{{ modelfile_download_path }}/Modelfile"
        owner: root
        group: root
        mode: '0644'

    - name: Modify Modelfile parameters
      lineinfile:
        path: "{{ modelfile_download_path }}/Modelfile"
        regexp: "{{ item.regexp }}"
        line: "{{ item.line }}"
        backrefs: yes
      loop:
        - { regexp: '^FROM .*$', line: 'FROM {{ modelfile_download_path }}/{{ modelfile_file }}' }
        - { regexp: '^PARAMETER temperature .*$', line: 'PARAMETER temperature {{ parameter.temperature }}' }
        - { regexp: '^PARAMETER top_p .*$', line: 'PARAMETER top_p {{ parameter.top_p }}' }
        - { regexp: '^PARAMETER top_k .*$', line: 'PARAMETER top_k {{ parameter.top_k }}' }
        - { regexp: '^PARAMETER num_ctx .*$', line: 'PARAMETER num_ctx {{ parameter.num_ctx }}' }
        - { regexp: '^PARAMETER num_thread .*$', line: 'PARAMETER num_thread {{ parameter.num_thread }}' }
        - { regexp: '^PARAMETER num_gpu .*$', line: 'PARAMETER num_gpu {{ parameter.num_gpu }}' }

    - name: Verify Modelfile content
      shell: cat "{{ modelfile_download_path }}/Modelfile"
      register: modelfile_content

    - name: Display modified Modelfile content
      debug:
        msg: "{{ modelfile_content.stdout }}"
    
    # ================ start deepseek =====================

    - name: Create Deepseek
      command: ollama create -f {{ modelfile_download_path }}/Modelfile deepseek-r1:{{ deepseek_version }}

    - name: Print manual execution message after success
      debug:
        msg: "Please manually execute: ollama run deepseek-r1:{{ deepseek_version }}"
